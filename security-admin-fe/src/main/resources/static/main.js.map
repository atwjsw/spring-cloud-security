{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,+DAA+D,+H;;;;;;;;;;;ACA/D,kFAAkF,SAAS,uIAAuI,YAAY,iCAAiC,mBAAmB,+G;;;;;;;;;;;;;;;;;;;;;;;;;ACAxP;AACQ;AAOlD;IAME,sBAAoB,IAAgB;QAApC,iBAaC;QAbmB,SAAI,GAAJ,IAAI,CAAY;QALpC,UAAK,GAAG,cAAc,CAAC;QACvB,kBAAa,GAAG,KAAK,CAAC;QACtB,gBAAW,GAAG,EAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC;QACrD,UAAK,GAAG,EAAE,CAAC;QAGT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,SAAS,CAAE,cAAI;YACjC,IAAI,IAAI,EAAE;gBACR,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC3B;YACD,IAAI,CAAC,KAAI,CAAC,aAAa,EAAE;gBACvB,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,6CAA6C;oBACpE,kBAAkB;oBAClB,0DAA0D;oBAC1D,qBAAqB;oBACrB,WAAW,CAAC;aACb;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAKC;QAJC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAC3C,cAAI,IAAI,YAAI,CAAC,KAAK,GAAG,IAAI,EAAjB,CAAiB,EACzB,cAAM,YAAK,CAAC,iBAAiB,CAAC,EAAxB,CAAwB,CAC/B,CAAC;IACJ,CAAC;IAED,6BAAM,GAAN;QAAA,iBAKC;QAJC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAClD,cAAM,YAAI,CAAC,aAAa,GAAG,KAAK,EAA1B,CAA0B,EAChC,cAAM,YAAK,CAAC,cAAc,CAAC,EAArB,CAAqB,CAC5B,CAAC;IACJ,CAAC;IAED,4BAAK,GAAL;QAAA,iBAKC;QAJC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CACjD,cAAM,YAAI,CAAC,aAAa,GAAG,IAAI,EAAzB,CAAyB,EAC/B,cAAM,YAAK,CAAC,aAAa,CAAC,EAApB,CAAoB,CAC3B,CAAC;IACJ,CAAC;IAxCU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAO0B,+DAAU;OANzB,YAAY,CAyCxB;IAAD,mBAAC;CAAA;AAzCwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AACI;AACW;AAET;AAc/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,qEAAgB;aACjB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACnBtB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div [hidden]=\\\"!authenticated\\\">\\r\\n  <h1>\\r\\n    Welcome to {{ title }}!\\r\\n  </h1>\\r\\n  <button (click)=\\\"getOrder()\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Get Order Info</button>\\r\\n  <p>order id: {{ order.id }}</p>\\r\\n  <p>order product id: {{ order.productId }}</p>\\r\\n  <button (click)=\\\"logout()\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Logout</button>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Security App';\r\n  authenticated = false;\r\n  credentials = {username: 'xixi', password: '123456'};\r\n  order = {};\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.http.get('me').subscribe( data => {\r\n      if (data) {\r\n        this.authenticated = true;\r\n      }\r\n      if (!this.authenticated) {\r\n        window.location.href = 'http://auth.imooc.com:9090/oauth/authorize?' +\r\n        'client_id=admin&' +\r\n        'redirect_uri=http://admin.imooc.com:8080/oauth/callback&' +\r\n        'response_type=code&' +\r\n        'state=abc';\r\n      }\r\n    });\r\n  }\r\n\r\n  getOrder() {\r\n    this.http.get('api/order/orders/1').subscribe(\r\n      data => this.order = data,\r\n      () => alert('get order fails')\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.http.post('logout', this.credentials).subscribe(\r\n      () => this.authenticated = false,\r\n      () => alert('logout fails')\r\n    );\r\n  }\r\n\r\n  login() {\r\n    this.http.post('login', this.credentials).subscribe(\r\n      () => this.authenticated = true,\r\n      () => alert('login fails')\r\n    );\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}